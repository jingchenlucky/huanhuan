###深入理解setState

setState对状态对改变，可能是异步的

如果改变状态的代码处于某个hTML元素的事件中，则其是异步的，否则是同步的

以后不论setState是同步还是异步，以防出错都要当作异步函数处理，将函数写在（第二个参数）回调函数中

若是连续调用异步的setState，修改state中的值，this.setState({n:this.state.n})写多次没用，因为是异步的，下次赋值还是之前的值
需要一直在回调函数中嵌套调用=====》引申出setState的第二种写法，第一个参数是函数，第二个参数是回调函数
如果setState是同步的，则不会出现这个问题。this.setState({n:this.state.n})可以直接写多次用

如果遇到某个事件中，需要同步调用多次，需要依赖之前的结果，需要使用函数的方式得到最新状态


最佳实践：
1.把所有的setState当作异步的
2.永远不要信任setState调用之后的状态（因为是异步的，状态可能还没有发生改变）
3.如果要使用改变之后的状态，需要使用回调函数（setState的第二个参数）
4。如果新的状态要根据之前的状态进行运算，使用函数的方式改变状态（setState的第一个参数）

React只对异步的setState进行优化，将多次setState进行合并（将多次状态改变完成后，再统一对state进行改变，然后触发render）

